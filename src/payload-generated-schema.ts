/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  serial,
  timestamp,
  varchar,
  numeric,
  integer,
  jsonb,
  pgEnum,
} from '@payloadcms/db-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-postgres/drizzle'
export const enum_contact_links_type = pgEnum('enum_contact_links_type', [
  'linkedin',
  'reddit',
  'gitea',
  'github',
])

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
  }),
)

export const experiences_tags = pgTable(
  'experiences_tags',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    tag: varchar('tag').notNull(),
  },
  (columns) => ({
    _orderIdx: index('experiences_tags_order_idx').on(columns._order),
    _parentIDIdx: index('experiences_tags_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [experiences.id],
      name: 'experiences_tags_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const experiences = pgTable(
  'experiences',
  {
    id: serial('id').primaryKey(),
    start: timestamp('start', { mode: 'string', withTimezone: true, precision: 3 }),
    end: timestamp('end', { mode: 'string', withTimezone: true, precision: 3 }),
    title: varchar('title'),
    company: varchar('company'),
    description: varchar('description'),
    link: varchar('link'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    experiences_updated_at_idx: index('experiences_updated_at_idx').on(columns.updatedAt),
    experiences_created_at_idx: index('experiences_created_at_idx').on(columns.createdAt),
  }),
)

export const projects_tags = pgTable(
  'projects_tags',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    tag: varchar('tag').notNull(),
  },
  (columns) => ({
    _orderIdx: index('projects_tags_order_idx').on(columns._order),
    _parentIDIdx: index('projects_tags_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [projects.id],
      name: 'projects_tags_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const projects = pgTable(
  'projects',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    order: numeric('order'),
    link: varchar('link'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    projects_updated_at_idx: index('projects_updated_at_idx').on(columns.updatedAt),
    projects_created_at_idx: index('projects_created_at_idx').on(columns.createdAt),
  }),
)

export const blog_posts_tags = pgTable(
  'blog_posts_tags',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    tag: varchar('tag').notNull(),
  },
  (columns) => ({
    _orderIdx: index('blog_posts_tags_order_idx').on(columns._order),
    _parentIDIdx: index('blog_posts_tags_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [blog_posts.id],
      name: 'blog_posts_tags_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const blog_posts = pgTable(
  'blog_posts',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    summary: varchar('summary'),
    text: jsonb('text'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    blog_posts_updated_at_idx: index('blog_posts_updated_at_idx').on(columns.updatedAt),
    blog_posts_created_at_idx: index('blog_posts_created_at_idx').on(columns.createdAt),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    mediaID: integer('media_id'),
    experiencesID: integer('experiences_id'),
    projectsID: integer('projects_id'),
    'blog-postsID': integer('blog_posts_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_experiences_id_idx: index(
      'payload_locked_documents_rels_experiences_id_idx',
    ).on(columns.experiencesID),
    payload_locked_documents_rels_projects_id_idx: index(
      'payload_locked_documents_rels_projects_id_idx',
    ).on(columns.projectsID),
    payload_locked_documents_rels_blog_posts_id_idx: index(
      'payload_locked_documents_rels_blog_posts_id_idx',
    ).on(columns['blog-postsID']),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    experiencesIdFk: foreignKey({
      columns: [columns['experiencesID']],
      foreignColumns: [experiences.id],
      name: 'payload_locked_documents_rels_experiences_fk',
    }).onDelete('cascade'),
    projectsIdFk: foreignKey({
      columns: [columns['projectsID']],
      foreignColumns: [projects.id],
      name: 'payload_locked_documents_rels_projects_fk',
    }).onDelete('cascade'),
    'blog-postsIdFk': foreignKey({
      columns: [columns['blog-postsID']],
      foreignColumns: [blog_posts.id],
      name: 'payload_locked_documents_rels_blog_posts_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const contact_links = pgTable(
  'contact_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    type: enum_contact_links_type('type').notNull(),
    url: varchar('url'),
  },
  (columns) => ({
    _orderIdx: index('contact_links_order_idx').on(columns._order),
    _parentIDIdx: index('contact_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [contact.id],
      name: 'contact_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const contact = pgTable('contact', {
  id: serial('id').primaryKey(),
  about: jsonb('about'),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const relations_users = relations(users, () => ({}))
export const relations_media = relations(media, () => ({}))
export const relations_experiences_tags = relations(experiences_tags, ({ one }) => ({
  _parentID: one(experiences, {
    fields: [experiences_tags._parentID],
    references: [experiences.id],
    relationName: 'tags',
  }),
}))
export const relations_experiences = relations(experiences, ({ many }) => ({
  tags: many(experiences_tags, {
    relationName: 'tags',
  }),
}))
export const relations_projects_tags = relations(projects_tags, ({ one }) => ({
  _parentID: one(projects, {
    fields: [projects_tags._parentID],
    references: [projects.id],
    relationName: 'tags',
  }),
}))
export const relations_projects = relations(projects, ({ many }) => ({
  tags: many(projects_tags, {
    relationName: 'tags',
  }),
}))
export const relations_blog_posts_tags = relations(blog_posts_tags, ({ one }) => ({
  _parentID: one(blog_posts, {
    fields: [blog_posts_tags._parentID],
    references: [blog_posts.id],
    relationName: 'tags',
  }),
}))
export const relations_blog_posts = relations(blog_posts, ({ many }) => ({
  tags: many(blog_posts_tags, {
    relationName: 'tags',
  }),
}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    experiencesID: one(experiences, {
      fields: [payload_locked_documents_rels.experiencesID],
      references: [experiences.id],
      relationName: 'experiences',
    }),
    projectsID: one(projects, {
      fields: [payload_locked_documents_rels.projectsID],
      references: [projects.id],
      relationName: 'projects',
    }),
    'blog-postsID': one(blog_posts, {
      fields: [payload_locked_documents_rels['blog-postsID']],
      references: [blog_posts.id],
      relationName: 'blog-posts',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))
export const relations_contact_links = relations(contact_links, ({ one }) => ({
  _parentID: one(contact, {
    fields: [contact_links._parentID],
    references: [contact.id],
    relationName: 'links',
  }),
}))
export const relations_contact = relations(contact, ({ many }) => ({
  links: many(contact_links, {
    relationName: 'links',
  }),
}))

type DatabaseSchema = {
  enum_contact_links_type: typeof enum_contact_links_type
  users: typeof users
  media: typeof media
  experiences_tags: typeof experiences_tags
  experiences: typeof experiences
  projects_tags: typeof projects_tags
  projects: typeof projects
  blog_posts_tags: typeof blog_posts_tags
  blog_posts: typeof blog_posts
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  contact_links: typeof contact_links
  contact: typeof contact
  relations_users: typeof relations_users
  relations_media: typeof relations_media
  relations_experiences_tags: typeof relations_experiences_tags
  relations_experiences: typeof relations_experiences
  relations_projects_tags: typeof relations_projects_tags
  relations_projects: typeof relations_projects
  relations_blog_posts_tags: typeof relations_blog_posts_tags
  relations_blog_posts: typeof relations_blog_posts
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
  relations_contact_links: typeof relations_contact_links
  relations_contact: typeof relations_contact
}

declare module '@payloadcms/db-postgres/types' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
